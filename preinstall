#!/usr/bin/env bash
#
# Prepares for linking of dotfiles
#
# - creates an archive of dotfiles
# - renames existing (if any) archives
#
# Typically, used prior to running dotfiles/link or dotfiles/install
#
# WARNING: don't run this if your HOME directory has spaces!! Not tested in that scenario!
#

function archive_existing_dotfiles() {

    [ $# -ne 1 ] && { echo "Usage: $0 archive_file_path"; exit 1; }

    archive="$1"
    # install yq (jq for yaml) if missing
    type yq &>/dev/null || brew install yq

    # find list of dotfiles to be linked
    #        (find links...strips comments.. replace ~ with absolute path)
    to_be_linked="$(yq e '.[]|select(.link)|.[]|keys|... comments=""|.[]' ./link.conf.yaml | sed "s#~#$HOME#" | xargs)"


    # ... archive them
    pushd $HOME || return 1

    # add your important dotfiles to the archive
    tar -czLf $archive $to_be_linked \
        "$HOME/.m2/settings*" \
        $HOME/.vim \
        $HOME/.adhoc \
        $HOME/.ssh \
        $HOME/.bash_profile \
        $HOME/.bashrc \
        $HOME/.profile \
        $HOME/.zshrc \
        $HOME/.ssh/config \
        $HOME/ssh_config \
        $HOME/.netrc \
        $HOME/.mackup.cfg \
        $HOME/.gnupg \
        $HOME/.Brewfile.lock.json \
        $HOME/.predotfiles/predotfiles*.txt \
        $HOME/predotfiles*.txt \
        $HOME/.composer/{composer.json,composer.lock} \
        2>/dev/null


    # ...and rename them.
    if test -f $archive; then

        # rename files ( allow link command to work )
        for file in $to_be_linked;
        do
            if test -L "$file"; then
                # symlink - remove it
                /bin/rm -f "$file" &&  echo "removed symlink $file" || true
            fi
            if test -f "$file"; then
                /bin/mv "$file" "${file}_backup" && echo "moved file $file to ${file}_backup" || true
                # [ -e "${file}_backup" ] && /bin/mv "${file}_backup" "$file"
            fi
        done

    else

        echo "🧐 something is wrong - can't find the archive file $archive"
        popd || return 2
        exit 2

    fi
    popd || return 1

    echo -e "✨ archive file created - $archive\n✨ check archive with\n\ttar -tvf $archive"
    #echo -e "You should be able to run\npushd \$HOME && bash dotfiles/install"

}

function brew_bundle_existing() {
    [ $# -ne 1 ] && { echo "Usage: $0 archive_file_path"; exit 1; }

    archive="$1"

    # generate dump of existing brew installation
    brew bundle dump --file $archive

    echo "✨ brew bundle file created - $archive"

}
function macappstore_bundle_existing() {
    [ $# -ne 1 ] && { echo "Usage: $0 archive_file_path"; exit 1; }

    archive="$1"

    ls /Applications/ > $archive
    echo "✨ list of macapps file created - $archive"
}

#
# for reference a keep safe
#
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo "${BASEDIR}"
cd "${BASEDIR}" ||:;

datepart=$(date +"%Y%m%d_%H%M%S")
mkdir -p $HOME/.predotfiles
brew_bundle_existing "$HOME/.predotfiles/predotfiles.Brewfile_${datepart}.txt"
macappstore_bundle_existing "$HOME/.predotfiles/predotfiles.MacAppStore_list-${datepart}.txt"
archive_existing_dotfiles "$HOME/.predotfiles/predotfiles.my-configuration-${datepart}.tar.gz"

