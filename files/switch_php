#!/usr/bin/env bash
#
# Valet is used to switch PHP versions
# Composer HOME is per PHP version @ $HOME/.composer_php@n.n
# Assumption is via brew bundle .Brewfile and we have tapped 'shivammathur/php' and 'shivammathur/extensions'
# PHP_DEFAULT_VERSION is used to set the SHELL's default php version - use switch_php to change versions


# PHP Laravel Valet
# PHP_EXTENSIONS Used in custom bash function 'switch_php'
# export PHP_EXTENSIONS="${PHP_EXTENSIONS:-shivammathur/extensions/redis shivammathur/extensions/apcu shivammathur/extensions/memcached shivammathur/extensions/mongodb shivammathur/extensions/imagick shivammathur/extensions/xdebug shivammathur/extensions/imap shivammathur/extensions/msgpack shivammathur/extensions/igbinary}"
# from shivammathur/extensions/imagickexport PHP_EXTENSIONS="${PHP_EXTENSIONS:-shivammathur/extensions/redis shivammathur/extensions/apcu shivammathur/extensions/memcached shivammathur/extensions/mongodb shivammathur/extensions/imagick shivammathur/extensions/xdebug shivammathur/extensions/imap shivammathur/extensions/msgpack shivammathur/extensions/igbinary}" # from shivammathur/extensions/imagick

export PHP_EXTENSIONS="${PHP_EXTENSIONS:-shivammathur/extensions/redis shivammathur/extensions/apcu shivammathur/extensions/memcached shivammathur/extensions/imagick shivammathur/extensions/xdebug shivammathur/extensions/imap shivammathur/extensions/msgpack shivammathur/extensions/igbinary shivammathur/extensions/mongodb}" # from shivammathur/extensions/imagick

# --- project on php-7.0 and above use these settings
export PHP_VERSIONS="${PHP_VERSIONS:-7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2 8.3 8.4}"
export COMPOSER_MAX_VERSION=2.2
export PHP_DEFAULT_VERSION="${SWITCHED_PHP_DEFAULT_VERSION:-${PHP_DEFAULT_VERSION:-8.3}}"
export VALET_VERSION=3.0 # for php 7.x+

# --- project on php-8.0 and above use these settings
#export PHP_VERSIONS="${PHP_VERSIONS:-8.0 8.1 8.2}" # abandon php-7.x in brew and valet... too hard to maintain
#export COMPOSER_MAX_VERSION=2.5
#export PHP_DEFAULT_VERSION="${SWITCHED_PHP_DEFAULT_VERSION:-${PHP_DEFAULT_VERSION:-8.0}}"
#export VALET_VERSION=4.0 # for php 8.0x+

export DBGLOG=/tmp/switch_php.debug.log

export COMPOSER_PROCESS_TIMEOUT="${COMPOSER_PROCESS_TIMEOUT:-900}" # default is COMPOSER_PROCESS_TIMEOUT=300
export COMPOSER_MEMORY_LIMIT="${COMPOSER_MEMORY_LIMIT:-2G}"



function __debug() {
    echo -e "$*" >> "$DBGLOG"
}

function __show() {
    echo -e "$*"; __debug "$*"
}

function __php_brew_latest_stable_version() {
    local base_file_name="/tmp/__php_brew_latest_stable.ver"
    local tmp_php_ver_file="${base_file_name}.$(date +%Y%m%d)" # cached daily file

    if [ -e $tmp_php_ver_file ]; then
        # use cached results
        cat $tmp_php_ver_file
        return
    fi
    # remember the version installed when using 'brew install php' as it changes with each new release of php.
    if [ ! -e $tmp_php_ver_file ]; then
        /bin/rm -f ${base_file_name}.* &>/dev/null # clean previous cache
        # find the version of the default php (most recent) installed via 'brew install php' !
        brew info php --json | jq -r '.[].versions.stable' | cut -d. -f-2 > $tmp_php_ver_file
    fi
}

function __php_version_inpath() {
    # when php found in the PATH return its version
    # OR 'empty value' when php is not installed
    type -p php &>/dev/null || { __debug "🧐 Unable to find php in the path"; return 1; }
    echo $(php -r 'echo "\n".PHP_VERSION;' | tail -1 | cut -d. -f-2)
}

function get_php_version() {
    # deprecated use __php_version_inpath
    # get the php version in the path
    __php_version_inpath
}

function __php_@version() {
    # handle 72, 7.2, php@7.2, php@72, php72, php7.2,
    # returns php@7.2 ( as used by brew or valet )
    # So dont use __show as it output to stdout

    if [ $# -eq 0 ]; then
        __debug "⇒ Usage: ${FUNCNAME[0]} 'php-version' - required use n.n style"
        return 1
    else
        __debug "⇒ ${FUNCNAME[0]} $*"
    fi

    local cleaned_php_ver
    cleaned_php_ver=$(echo "$1" | tr -d . | sed 's,php,,' | tr -d '@')

    # check for format n.n
    if echo "$cleaned_php_ver" | grep -E '^[[:digit:]][[:digit:]]$' &>/dev/null; then
        echo "php@$(echo $cleaned_php_ver | cut -c1).$(echo $cleaned_php_ver | cut -c2)"
    else
        return 2
    fi
}

function __composer_home_path() {
    # output "composer home path" for specific php version
    # the path does not have to exist
    # So dont use __show as it output to stdout
    if [ $# -eq 0 ]; then
        __debug "⇒ Usage: ${FUNCNAME[0]} 'php-version' - required use n.n style"
        return 1
    else
        __debug "⇒ ${FUNCNAME[0]} $*"
    fi

    local php_ver
    php_ver=$(__php_@version $1) &>/dev/null || return 2

    echo "$HOME/.composer_$php_ver"
}

function __php_strip_path() {
    __debug "⇒ ${FUNCNAME[0]}"
     # strip any existing composer homes
    #__debug "⚡️ PRE  \n$(env|egrep '^PATH=|COMPOSER_HOME')"
    export PATH=$(echo $PATH | sed -E 's,/usr/local/opt/php@[[:digit:]\.]+/bin:,,g')  || { __debug "Stripping problem"; }
    export PATH=$(echo $PATH | sed -E 's,/usr/local/Cellar/php/[[:digit:]\.]+/bin:,,g')  || { __debug "Stripping problem"; }
    export PATH=$(echo $PATH | sed -E 's,/usr/local/Cellar/php@[[:digit:]\.]+/[[:digit:]\._]+/bin:,,g')  || { __debug "Stripping problem"; }
    #__debug "⚡️ POST \n$(env|egrep '^PATH=|COMPOSER_HOME')"
}

function __composer_strip_path() {
    __debug "⇒ ${FUNCNAME[0]}"
    # strip any existing composer homes
    #__debug "⚡️ PRE  \n$(env|egrep '^PATH=|COMPOSER_HOME')"
    export PATH=$(echo $PATH | sed -E "s,$HOME/\.composer_php@[[:digit:]\.]+/vendor/bin:,,g") || { __debug "Stripping problem"; }
    #__debug "⚡️ POST \n$(env|egrep '^PATH=|COMPOSER_HOME')"
}

function __php_install_version() {
    __debug "⇒ ${FUNCNAME[0]}"

    sudo -v
    if [ $# -eq 0 ] || [ "$1" = "$(__php_brew_latest_stable_version)" ]; then
         __show "✨ Install Brew's most recent default php $(__php_brew_latest_stable_version)"
        HOMEBREW_NO_INSTALL_CLEANUP=true brew reinstall --force -q php | tee -a $DBGLOG &>/dev/null
    else
        local php_version="${1:-PHP_DEFAULT}"
        local php_valet_version="$(__php_@version $php_version)"
        __show "✨ Install Brew's $php_valet_version version"
        HOMEBREW_NO_INSTALL_CLEANUP=false brew reinstall --force -q shivammathur/php/$php_valet_version >>$DBGLOG 2>&1
    fi
}

function __php_install_extensions() {
    if [ $# -eq 0 ]; then
        __show "📗️ Usage: ${FUNCNAME[0]} 'php-version' - required use n.n style"
        return 1
    else
        __show "📗️ ${FUNCNAME[0]} $*"
    fi
    # this might be needed to resolve conflicts between redis@7.0 and php-redis@7.0
    # brew reinstall redis@6.2 && brew link redis@6.2 && brew pin redis@6.2

    local php_version="${1}"

    EXTS="$PHP_EXTENSIONS"
    if [ $php_version = "8.3" ] || [ $php_version = "8.4" ]; then
        # remove imap - its compiled into 8.3
        EXTS=$(echo EXTS|sed 's#shivammathur/extensions/imap##')
    fi
    __show "⚡️ Add php extensions\n$(echo $EXTS | xargs -n 1)\n"

    for ext in $EXTS; do
        forumla="${ext}@${php_version}"
        HOMEBREW_NO_INSTALL_CLEANUP=true brew reinstall -q ${forumla} | tee -a $DBGLOG | grep -E '^=.*nstalling'
    done
    if [ $php_version = "7.0" ]; then
        # as of 2023-08-01 xdebug fails to install (sha issue) so use --build-from-source
        brew install shivammathur/extensions/xdebug@7.0 --build-from-source
    fi
}

function __php_install_via_valet() {
    #
    # https://laracasts.com/discuss/channels/general-discussion/issues-with-laravel-valet-when-installing-old-php-version
    # https://freek.dev/1185-easily-switch-php-versions-in-laravel-valet
    #

    if [ $# -eq 0 ]; then
        __show "📗️ Usage: ${FUNCNAME[0]} 'php-version' - required use n.n style"
        return 1
    else
        __show "📗️ ${FUNCNAME[0]} $*"
    fi

    sudo -v

    __show "⚡️ Fix php permissions"
    sudo chown -R $(id -un) /usr/local/Cellar/php* >>$DBGLOG 2>&1 || true
    sudo chmod -R 755 /usr/local/Cellar/php* >>$DBGLOG 2>&1 || true

    # =========================================================================
    #
    #   CURRENT PHP VERSION: Ensure existing installation is ready
    #
    # local php_version_available=$(brew list -1 --formula | grep php@ | head -1)

    local php_version="${1}"
    local php_valet_version="$(__php_@version $php_version)"

#    __valet_install $php_valet_version || return 1
    __show "⚡️ Switching from $(__php_version_inpath)"
    __show "⚡️ Fix php permissions"
    #sudo chown -R $(id -un) /usr/local/Cellar/{php*,dnsmasq*,nginx*} >>$DBGLOG 2>&1 || true
    #sudo chown -R $(id -un) /usr/local/Cellar/php* >>$DBGLOG 2>&1 || true
    #sudo chmod -R 755 /usr/local/Cellar/php* >>$DBGLOG 2>&1 || true

    # =========================================================================
    #
    #   TARGET PHP VERSION
    #
    if echo '7.1 7.4' | grep -q "$php_version"; then
        # !!! We need to do this for php versions no longer supported/failing to install with Valet use
        #__debug "⚡️ Installing shivammathur/php/$php_valet_version to ensure 'valet use' works for all version of php"
        #HOMEBREW_NO_INSTALL_CLEANUP=false brew reinstall --force -q shivammathur/php/$php_valet_version >>$DBGLOG 2>&1
        __php_install_version $php_version
    fi
    __show "✨ Install PHP via Valet 'use' command"
    #read -p "About to switch via 'valet use' $PHP_VER_TARGET - press enter to continue."
    if ! valet use $php_valet_version; then # install php
        # https://github.com/shivammathur/homebrew-php
        # https://dev.to/ibrarturi/installing-php-80-on-macos-overcoming-disabled-versions-1hio
        echo "Failed to install '$php_valet_version' - trying force install of Disabled Version"
        brew install shivammathur/php/$php_valet_version && valet link $php_valet_version
    fi
    __php_install_extensions $php_version

    # This might be required as brew services sometimes fail
    __show "⚡️ brew postinstall $php_valet_version (forced to run)"
    brew postinstall $php_valet_version | grep -E 'Postinstalling|update-channels'

    __show "⚡️ Switched to $php_valet_version"
    __show "⚡️ Valet restarting $php_valet_version"
    # valet install
    # valet restart

    #sudo brew services list
    __show "🪲 debug logs at $DBGLOG"

}

function __composer_install() {
    __show "📗️ ${FUNCNAME[0]}"

    MIN_SUPPORTED_PHP=$(echo "$PHP_VERSIONS" | tr ' ' "\n" | sort -n | head -1)
    if [ 1 -eq $(bc --expression="8.1<=$MIN_SUPPORTED_PHP") ]; then
        # Use latest composer (via brew) once we've moved all project to php8.1+
        /bin/rm -f /usr/local/bin/composer &>/dev/null || true
        __show "✨ Install/Upgrade composer to latest version version (as we are only supporting PHP versions $PHP_VERSIONS)"
        brew uninstall composer &>/dev/null || true
        /bin/rm -f /usr/local/bin/composer &>/dev/null || true
        HOMEBREW_NO_INSTALL_CLEANUP=false brew install composer --ignore-dependencies --force | tee -a $DBGLOG
        return
    fi

    if type -p composer >>$DBGLOG 2>&1; then
        composer_version="$(composer about | grep 'version '| rev | awk '{print $1}'|rev |cut -d. -f-2)" #n.n format
        __show "✨ Composer install exists version:$composer_version $(which composer)" || true
        if [ 1 -eq $(bc --expression="$composer_version>2.2") ]; then
            __debug "✨ brew uninstall composer and remove /usr/local/bin/composer"
            brew uninstall composer &>/dev/null || true
            /bin/rm -f /usr/local/bin/composer &>/dev/null || true
        else
            __show "✨ composer is at the correct version:$composer_version... no action"
            return
        fi
    fi

    curl -s -L  https://getcomposer.org/download/2.2.21/composer.phar --output /usr/local/bin/composer &&
    chmod +x /usr/local/bin/composer
    __show "✨ composer 2.2 installed as a direct phar copy https://getcomposer.org/download/ for legacy php versions." || true
    return

    # alternate installs
    __show "✨ Install missing composer at php7.2 compatablity --2.2.( without dependencies - they are installed later)"
    # manual install https://getcomposer.org/doc/faqs/how-to-install-composer-programmatically.md
    # using php and composer installer at a specific installer version (compatible with php 7.0)
    composer2_2ltsthash=e5deaee38e51e2725c5f237635e2e3e907241e60
    composer_installer_path="https://raw.githubusercontent.com/composer/getcomposer.org/$composer2_2ltsthash/web/installer"
    wget $composer_installer_path -O - -q | php -- --quiet --2.2 && sudo mv ./composer.phar /usr/local/bin/composer &&
    chmod +x /usr/local/bin/composer
    return $?

}

function __php_export_env_path() {
    # Set PHP and Composer Global PATH and ENV

    # !! IMPORTANT - function ALWAYS behaves for specified php-version as follows
    #  1. sets the COMPOSER_HOME env (regardless of directory's existence)
    #  2. updates PATH for COMPOSER_HOME/vendor/bin (regardless of directory's existence)
    #  3. updates PATH for php-version/bin (only when directory's exists)
    #  4. returns error code when php-version bin path does not exist

    # Always ensure php/bin and composer/vendor/bin comes early in the search path

    if [ $# -eq 0 ]; then
        __debug "📗️ Usage: ${FUNCNAME[0]} 'php-version' - required use n.n style"
        return 1
    else
        __debug "📗️ ${FUNCNAME[0]} $*"
    fi

    local php_version="${1}"

    COMPOSER_HOME="$(__composer_home_path $php_version)"
    export COMPOSER_HOME

    local COMPOSER_BIN_PATH="${COMPOSER_HOME}/vendor/bin"
    __composer_strip_path
    export PATH="$COMPOSER_BIN_PATH:$PATH"

    __show "⚡️ PATH updated for composer global ${COMPOSER_BIN_PATH}"

    if false; then # this works but is SLOWISH to determine phppath (ignore for now - use faster mechanism)
        # try likely paths - first specific PHP version
        phppath=$(dirname $(brew list -1 --formula php@$php_version 2>/dev/null | grep 'bin/php$') 2>/dev/null);
        if [ -z "$phppath" ]; then
            # and if not found then try the default brew php version (this is the default/latest version )
            phppath=$(dirname $(brew list -1 --formula php 2>/dev/null | grep 'bin/php$') 2>/dev/null)
        fi
    fi

    # this is faster to determine phppath
    phppath=$(dirname $(find $(brew --prefix)/Cellar/php* -type f -maxdepth 3 -mindepth 3 -regex ".*/php[@0-9\._]*/[0-9\._]*/bin/php$" 2>/dev/null | grep "$php_version" | sort -r | head -1) 2>/dev/null)

    # resolve any symlink to canonical base path e.g. /usr/local/Cellar/php/8.2.8/bin
    # phppath="$(dirname $(readlink -f $phppath))"
    if [ -e $phppath/php ]; then
        php_version_found=$(echo $($phppath/php -r 'echo "\n".PHP_VERSION;' | tail -1 | cut -d. -f-2))
        versions="php_version_found=$php_version_found = php_version_requested=$php_version"
        __debug $versions
        if [ ! "$php_version_found" = "$php_version" ]; then
            __show "💥 PHP version in PATH differs from requested php@${php_version}\n$versions"
            return 3
        fi
    else
        __show "💥 php@${php_version} missing! try php_install ${php_version}"
        return 2
    fi

    if [ -n "$phppath" -a -e "$phppath" ]; then
        __php_strip_path
        export PATH="$phppath:$PATH"
        __show "⚡️ PATH updated for PHP ${phppath}"
    else
        __show "💥 Cannot find PHP in PATHs"
         return 3
    fi

}

function __composer_clean() {

    if [ $# -eq 0 ]; then
        /bin/rm -rf "${HOME}"/.composer/ 2>/dev/null || true
        return 1
    else
        __debug "📗️ ${FUNCNAME[0]} $*"
    fi

    local php_ver
    php_ver=$1

    export COMPOSER_HOME="$(__composer_home_path $php_ver 2>/dev/null)"

    if test ! -z "$COMPOSER_HOME" && test -d "$COMPOSER_HOME"; then
        /bin/rm -f "${COMPOSER_HOME}"/composer.{json,lock} 2>/dev/null || true
        /bin/rm -rf "${COMPOSER_HOME}"
    fi

    composer global --no-interaction dump >>$DBGLOG 2>&1 || true # dump autoloader to generate 'platform_check.php'
}

function __valet_502_fix() {
    __show "📗️ ${FUNCNAME[0]} - launchctl php-fpm plist fix for OBJC_DISABLE_INITIALIZE_FORK_SAFETY"

    # Valet issue 2023 July - https://github.com/laravel/valet/issues/1433
    launchfile_templates=$(find $(brew --prefix)/Cellar/php* -type f -maxdepth 2 -mindepth 2 -path '*homebrew*.plist')

    for template in $launchfile_templates; do
        __debug "⚡️ Checking $template"

        if ! grep -q 'OBJC_DISABLE_INITIALIZE_FORK_SAFETY' $template; then
            __debug "⚡️ Applying Fix for $template"
            # if the php-fpm launch template does not contain the temporary workaround (see valet issue 1433), lets fix it.
            nl=$'\n'
            fixcode="\t<key>RunAtLoad</key>\n\t<true/>\n\t<key>EnvironmentVariables</key>\n\t<dict>\n\t\t<key>OBJC_DISABLE_INITIALIZE_FORK_SAFETY</key>\n\t\t<string>YES</string>\n\t</dict>"
            # ensure any previous markers are removed
            sed -i '' '/_MARKER_/d' $template

            # insert marker for - match RunAtLoad, Substitute it, move to next line, delete line
            sed -i -e '/RunAtLoad/{s/^.*RunAtLoad.*$/_MARKER_/;n;d;}' $template

            # easier replacement using marker
            sed -i '' "s#_MARKER_#$fixcode#" $template
        else
            __debug "⚡️ Skipping Fix for $template - already applied."
        fi
    done

}

function __composer_packages_install() {

    if [ $# -eq 0 ]; then
        __show "📗️ Usage: ${FUNCNAME[0]} 'php-version' - required use n.n style"
        return 1
    else
        __show "📗️ ${FUNCNAME[0]} $*"
        #__debug "${FUNCNAME[0]}" >>$DBGLOG 2>&1
    fi


    local php_ver
    php_ver=$1

    __debug "⚡️ ${FUNCNAME[0]} ENV CHECK"
    __debug "$(env|egrep '^PATH=|COMPOSER_HOME')"
    export COMPOSER_HOME="$(__composer_home_path $php_ver)"
    __debug "$(env|egrep '^PATH=|COMPOSER_HOME')"

    valetversion=$VALET_VERSION

    __debug "⚡️ composer global require for $php_ver and Valet $valetversion"
    case "$php_ver" in
    5.6)
        __debug "not supported" && return 1
        ;;
    8.0)
        composer global config --no-interaction minimum-stability alpha
        composer global config --no-interaction --no-plugins allow-plugins.kylekatarnls/update-helper true
        composer global require --quiet --with-all-dependencies --no-interaction \
            "friendsofphp/php-cs-fixer" \
            "jorijn/laravel-security-checker" \
            "laravel/installer" \
            "laravel/valet:^$valetversion" \
            "laravel/envoy" \
            "tightenco/takeout" \
            "tightenco/tlint"
        ;;
    8.1)
        composer global config --no-interaction minimum-stability alpha
        composer global config --no-interaction --no-plugins allow-plugins.kylekatarnls/update-helper true
        composer global require --quiet --with-all-dependencies --no-interaction \
            "friendsofphp/php-cs-fixer" \
            "jorijn/laravel-security-checker" \
            "laravel/installer" \
            "laravel/valet:^$valetversion" \
            "laravel/envoy" \
            "tightenco/takeout" \
            "tightenco/tlint"
        ;;
    8.2)
        composer global config --no-interaction minimum-stability alpha
        composer global config --no-interaction --no-plugins allow-plugins.kylekatarnls/update-helper true
        composer global require --quiet --with-all-dependencies --no-interaction \
            "friendsofphp/php-cs-fixer" \
            "jorijn/laravel-security-checker" \
            "laravel/installer" \
            "laravel/valet:^$valetversion" \
            "laravel/envoy" \
            "tightenco/takeout" \
            "tightenco/tlint"
        ;;
    *)
        composer global config --no-interaction minimum-stability alpha
        composer global config --no-interaction --no-plugins allow-plugins.kylekatarnls/update-helper true
        composer global require --with-all-dependencies --no-interaction \
            "friendsofphp/php-cs-fixer" \
            "jorijn/laravel-security-checker" \
            "laravel/installer" \
            "laravel/valet:^$valetversion" \
            "laravel/envoy"
        ;;
    esac
    composer global --no-interaction dump >>$DBGLOG 2>&1 || true # dump autoloader to generate 'platform_check.php'
    __valet_502_fix
}

function __valet_install() {

    if [ $# -eq 0 ]; then
        __show "📗️ Usage: ${FUNCNAME[0]} 'php-version' - required use n.n style"
        return 1
    else
        __show "📗️ ${FUNCNAME[0]} $*"
        #__debug "${FUNCNAME[0]}" >>$DBGLOG 2>&1
    fi

    local php_ver
    php_ver=$1

    if ! valet trust &>/dev/null; then
        # valet install has never been run... lets fix that.
        __show "⚡️ Valet '$(type -p valet)' exists but we need to run 'valet install'."
        valet install 2>/dev/null || {
            valet use $php_ver &&
            valet install
        }
    fi

    # permissions for interrupt free php switching with valet
    __show "⚡️ Trust in Valet !"
    sudo -v && valet trust

    # sometimes brew services php-fpm fails - this is a permissions issue that creeps in somewhere.
    (pushd /usr/local/etc/ && sudo chown -R $(whoami) php* && popd) >>$DBGLOG 2>&1 || {
        __show "🤔 Looks like permissions reset failed"
        __show " try\n  brew postinstall PHP_VERSION ($(__php_version_inpath) --verbose --debug"
    }
}

function php_install() {
    __show "📗️ ${FUNCNAME[0]} $*"

    sudo -v
    if ! type -p php >>$DBGLOG 2>&1; then
        phpversion="${1:-$PHP_DEFAULT_VERSION}"
        __show "🚀 No PHP found.. Lets try installing $phpversion"
        # no php version detected in the path - this is for NEW installs and is required before other versions.
        __php_strip_path &&
        __composer_strip_path &&
        __php_install_version $phpversion &&
        phpversion="${phpversion:-$(__php_version_inpath)}" &&
        __php_export_env_path $phpversion &&
        __php_install_extensions $phpversion &&
        __composer_install &&
        __php_export_env_path $phpversion &&
        __composer_clean $phpversion &&
        __composer_packages_install $phpversion &&
        __valet_install $phpversion || {
            __show "💥 Failed to install default php.. suggest reviewing/tailing $DBGLOG and trying again."
        }
        return
    fi

    if [ $# -ne 0 ]; then
        __show "🚀 Lets try installing $1"
        phpversion=$1
        __php_install_via_valet $phpversion &&
        __php_strip_path &&
        __composer_strip_path &&
        __php_export_env_path $phpversion &&
        __composer_clean $phpversion &&
        __composer_packages_install $phpversion &&
        valet restart || {
            __show "💥 Failed to install default php $phpversion.. suggest reviewing/tailing $DBGLOG and trying again."
            __debug "$(env|egrep '^PATH=|COMPOSER_HOME')"
            return 1
        }
        __show "✨ PHP finished installation ($(php -v | head -1))."
    else
        __show "✨ PHP currently installed ($(php -v | head -1)). Nothing to do."
    fi

}

function php_cli_from_valet() {
    [ -e .valetphprc ] || {
        [ -e artisan ] && __show "Cannot find .valetphprc, try \necho php@8.1 > ./.valetphprc"
        return 2
    }
    __show "Found '$(pwd)/.valetphprc' - upgrade to valet 3.x and use 'valet isolate php@n.n'"
    local php_ver=$(grep 'php@' .valetphprc | cut -d'@' -f2)
    if [ ! -z "$php_ver" ]; then

        __php_@version "$php_ver" &>/dev/null || return 1
        local php_at_ver=$(__php_@version "$php_ver") || return 1
        local PHP_BIN_PATH=$(echo "$(brew --prefix)/opt/${php_at_ver}")

        if [ ! -z "$PHP_BIN_PATH" -a -d "$PHP_BIN_PATH" ]; then

            __php_export_env_path $php_ver

        else
            __show "Cannot find PHP_BIN_PATH=$PHP_BIN_PATH"
            __show "✨ Try running switch_php $php_ver"
        fi
    else
        return 1
    fi
}


function valet_uninstall() {

    __show "📗️ ${FUNCNAME[0]}"

    #
    # Help brew after valet's touched things.
    #
    # sudo chown -R $(id -un) /usr/local/Cellar/{php*,dnsmasq*,nginx*} >>$DBGLOG 2>&1 || true

    __show "🤞 Uninstall valet"
    type -p valet >>$DBGLOG 2>&1 && yes | valet uninstall --force --no-interaction >>$DBGLOG 2>&1 || true

    if composer global --no-interaction remove laravel/valet >>$DBGLOG 2>&1; then
        __show '   Valet removed via composer global $COMPOSER_HOME'
    else
        __show '   Valet not installed via composer global $COMPOSER_HOME'
    fi

    __show "🤞 Uninstall brew services"
    for formula in dnsmasq nginx; do
        sudo brew services stop $formula >>$DBGLOG 2>&1 || true
        sudo brew uninstall --force --ignore-dependencies "$formula" >>$DBGLOG 2>&1 || sudo rm -rf /usr/local/Cellar/$formula || true
        brew uninstall --force --ignore-dependencies "$formula" >>$DBGLOG 2>&1 || sudo rm -rf /usr/local/Cellar/$formula || true
    done

    __show "🤞 Force tidyup of empty brew formula directories"
    find /usr/local/Cellar -type d -empty -maxdepth 1 -exec rm -rf {} \; || true

    [ -d ~/.valet ] && sudo rm -r ~/.valet >>$DBGLOG 2>&1 || true
    [ -d ~/.config/valet ] && sudo rm -r ~/.config/valet >>$DBGLOG 2>&1 || true

    __show "🤞 Force tidyup of php / pecl / pear directories"
    sudo rm -rf /usr/local/etc/php/* /private/tmp/pear/* /usr/local/lib/php/* /usr/local/share/php* /usr/local/share/pear* >>$DBGLOG 2>&1 || true
    sudo rm -rf /usr/local/etc/php/* /private/tmp/pear/* /usr/local/lib/php/* /usr/local/share/php* /usr/local/share/pear* >>$DBGLOG 2>&1 || true
    sudo rm -rf /private/tmp/pear/ >>$DBGLOG 2>&1 || true
    sudo rm -rf /usr/local/bin/valet

    # ls -l ~/Library/LaunchAgents /Library/Launch*
    find ~/Library/LaunchAgents -type f -path '*homebrew*php*.plist' -exec /bin/rm -f {} \;
    sudo find /Library/LaunchDaemons -type f -path '*homebrew*php*.plist' -exec /bin/rm -f {} \;
    sudo find /Library/LaunchAgents -type f -path '*homebrew*php*.plist' -exec /bin/rm -f {} \;

    # some processes are left hanging around!
    sudo killall -KILL php-fpm
    killall -KILL php-fpm

    brew cleanup -q >>$DBGLOG 2>&1 || true
}

function php_uninstall() {
    #
    # php_uninstall
    #
    __show "📗️ ${FUNCNAME[0]} $*"
    sudo -v
    #
    # all php versions will be uninstalled when running valet uninstall --force
    # excessive indeed - but appears to be the only way.
    #
    valet_uninstall

    __show "🤞 Uninstall brew Formula + Php"

    phps="shivammathur/php/php $(for ver in $PHP_VERSIONS; do echo shivammathur/php/php@$ver; done)"
    formulas="$(for ext in $PHP_EXTENSIONS; do for ver in $PHP_VERSIONS; do echo $ext@$ver; done; done | xargs)"

    HOMEBREW_NO_INSTALL_CLEANUP=true brew uninstall --force composer php $phps $formulas composer

    __show "🤞 Uninstall brew services"
    for formula in $(brew services list | grep '^php' | cut -d' ' -f1); do
        sudo brew services stop $formula >>$DBGLOG 2>&1
        #sudo brew services remove $formula >>$DBGLOG 2>&1
        brew services stop $formula >>$DBGLOG 2>&1
        #brew services remove $formula >>$DBGLOG 2>&1
    done

    __show "🤞 Tidy brew folders"
    find /usr/local/Cellar -type d -empty -maxdepth 1 -exec rm -rf {} \; || true
    sudo /bin/rm -rf /usr/local/Cellar/php@* /usr/local/Cellar/php || true
    sudo /bin/rm -f $(brew --prefix)/bin/valet >>$DBGLOG 2>&1 || true
    brew cleanup -q >>$DBGLOG 2>&1 || true


    __show "🤞 Composer clean"
    __composer_clean &>/dev/null # remove default if it exists
    for ver in $PHP_VERSIONS; do

        __composer_clean $(__php_@version $ver) # remove php-version specific globals
    done

}

function switch_php() {

    if [ $# -eq 0 ]; then
        __debug "Usage: ${FUNCNAME} 'php version' - required use n.n style"
        return 1
    else
        __debug "${FUNCNAME[0]} $*" >>$DBGLOG 2>&1
    fi

    # if php version is not installed __php_export_env_path will return error
    __php_export_env_path "$1" &&
    current=__php_version_inpath ||
    php_install $1

}

function vlsi() {
    valet link $* && valet secure $* && valet isolate --site=$*
    valet links
}

function uvlsi() {
    valet unsecure $* && valet unisolate --site=$* && valet unlink $*
    valet links
}

function __phpunit() {
    #
    # run vendor/bin/phpunit and mani[ulate output for clearer results and diff/comparisons.
    #
    # Default output is to the /tmp folder, filename generated based on timestamp and working folder name.
    #
    # To change the default output files name and directory use ENV vars as follows
    #   __PHPUNIT_BASE_DIR  - folder to output files (must exist)
    #   __PHPUNIT_BASE_NAME - filename base used for all output files.
    #   JUNIT_LOG           - specific override for the JUnit output file/path
    #   TESTDOX_LOG         - specific override for the --testdox results (this is used in diffing)
    #
    # e.g. __PHPUNIT_BASE_DIR=scratch __PHPUNIT_BASE_NAME=ccs_release2_10 JUNIT_LOG=scratch/phpunit-junit.xml TESTDOX_LOG=build/testdox.log __php_unit
    #
    [ ! -e vendor/bin/phpunit ] && {
        echo "No vendor/bin/phpunit"
        return 1
    }

    if [ -n "$__PHPUNIT_BASE_DIR" ]; then
        if [ ! -d "$__PHPUNIT_BASE_DIR" ]; then
            echo "Directory not found for $__PHPUNIT_BASE_DIR, stopping!";
            return 1
        fi
    fi

    testing_binary="vendor/bin/phpunit"
    if [ -n "$USE_PEST" ]; then
        testing_binary="vendor/bin/pest"
        if [ ! -e "${testing_binary}" ]; then
            testing_binary="vendor/bin/phpunit"
            echo "⚡️ ${GREEN}PEST does not appear to be installed, reverting to PHPUNIT for now.${NC}"
        fi
    fi

    # Setup Temp files
    tmpBaseDir="${__PHPUNIT_BASE_DIR:-/tmp}"
    tmpBaseName="${__PHPUNIT_BASE_NAME:-phpunit.$(basename $(pwd))_$(date +%Y%m%d)}"
    #tmpBaseName=$(mktemp "$tmpBaseDir/phpunit.$(basename $(pwd))_$(date +%Y%m%d)_XXXXXXX")


    tmpfileRaw="${tmpBaseDir}/${tmpBaseName}.log"
    tmpfileTests="${TESTDOX_LOG:-${tmpBaseDir}/${tmpBaseName}_tests.log}"
    tmpfileSummary="${tmpBaseDir}/${tmpBaseName}_summary.log"
    # allow the junit file to be overridden via ENV var
    tmpfileJunit="${JUNIT_LOG:-${tmpBaseDir}/${tmpBaseName}_junit.xml}"

    echo > $tmpfileRaw; echo > $tmpfileTests; echo > $tmpfileSummary; echo > $tmpfileJunit

    #__php_unit > >(tee -a $tmpfileTests) 2> >(tee -a $tmpfileSummary >&2)
    local _PASS='Passing'
    local _FAIL='Failure'
    local _PASS='✓'
    local _FAIL='x' #'⊗'

    # Run the tests
    #   1. redirect standard progress to stderr (we will filter out noise and only show summary)
    #   2. display progress to stdout using testdox format (and tee into a file, used for diffing versions if required)
    #   3. tidy output with sed, show clearly passing and failing tests.

    $testing_binary "$@" --stderr --testdox-text /dev/stdout --log-junit $tmpfileJunit 2>$tmpfileRaw | tee -a $tmpfileTests | sed "s/\[x\]/[${GREEN}${_PASS}${NC}]/"

    # All tests have completed and we've got multiple log files.
    # $SEDARGS_INLINE_REPLACE doesn't seem to work - its appending '' to the end of the output file!
    # sed $SEDARGS_INLINE_REPLACE "s/\[ \]/[${_FAIL}]/" $tmpfileTests
    if [ "$MACHINE" == "mac" ]; then
        sed -i '' "s/\[x\]/[${_PASS}]/" $tmpfileTests
        sed -i '' "s/\[ \]/[${_FAIL}]/" $tmpfileTests
    else
        sed -i "s/\[x\]/[${_PASS}]/" $tmpfileTests
        sed -i "s/\[ \]/[${_FAIL}]/" $tmpfileTests
    fi

    egrep 'Tests: ' $tmpfileRaw >> $tmpfileTests

    # summarise - show only progress lines and statistics to complete (details are not displayed).
    egrep '\([ 0-9]{1,3}%\)' $tmpfileRaw > $tmpfileSummary
    echo -e "" >> $tmpfileSummary
    egrep 'Time:|Tests: ' $tmpfileRaw >> $tmpfileSummary

    # show summary
    cat $tmpfileSummary
    echo -e "\nraw:     ${tmpfileRaw}\nsummary: ${tmpfileSummary}\njunit:   ${tmpfileJunit}\ntests:   ${tmpfileTests}" > /dev/stderr
}

# Set PHP and Composer Global PATH and ENV
__php_export_env_path $PHP_DEFAULT_VERSION

# pre-cache latest php available via brew - ( 1st time each day this takes a few seconds )
__php_brew_latest_stable_version &>/dev/null
