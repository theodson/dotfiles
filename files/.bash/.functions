#!/usr/bin/env bash

if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        RED="$(tput setaf 1)"
        NC="$(tput sgr0)"
    fi
fi

# macOS sed fix - https://stackoverflow.com/questions/5694228/sed-in-place-flag-that-works-both-on-mac-bsd-and-linux
sedi=(-i) && [ "$(uname)" == "Darwin" ] && sedi=(-i '')
# usage - sed "${sedi[@]}" "s/^LOOKFOR.*/REPALCEWITH/" yourfile

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.


function enter_directory() {
    # use this function in the PROMPT_COMMAND to auto execute when changing into a directory.
    # e.g. export PROMPT_COMMAND="$PROMPT_COMMAND; enter_directory"

	if [[ $PWD == $PREV_PWD ]]; then
		return
	fi

	PREV_PWD=$PWD

	if [ -f .enter ]; then
	    # look in current directory for a .enter script to run and return
	    source .enter
	    return
    fi

    # default behaviour when

    # Use correct node version AND use latest compatible NPM
	[[ -f ".nvmrc" ]] && nvm use || true

    # set local PATH to use PHP as defined in .valetphprc
    type php_cli_from_valet &>/dev/null && php_cli_from_valet || true

    [ -f "package.json" -o -f ".nvmrc" ] && {
        [ "$(npm -v | cut -d. -f1)" -lt 8 ] && echo "Suggest: upgrade npm with 'npm install -g npm@latest'"
    }
}

function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}


function sudo_using_touchid() {
	sudo sed -i.bak 's/^auth.*sufficient.*\.so/auth       sufficient     pam_tid.so/' /etc/pam.d/sudo;
}


function sudo_using_default() {
	sudo sed -i.bak 's/^auth.*sufficient.*\.so/auth       sufficient     pam_smartcard.so/' /etc/pam.d/sudo;
}

function brew_service_pluck() {
    case $# in
        1 )
            sudo brew services info --json $1 | jq -e -r .[]
            ;;
        2 )
            sudo brew services info --json $1 | jq -e -r .[].$2
            ;;
        * )
            ;;
    esac
}

function nah() {
    archivelist=$(mktemp "/tmp/nah-reset-list.$(basename $(pwd)).$(date "+%Y-%m-%d_%H%M").XXXXXXX") &&
    safearchive="$archivelist.tar.gz" &&
    git ls-files --others --exclude-standard -m > $archivelist &&
    tar -czf $safearchive -T $archivelist &>/dev/null || true &&
    echo -e "View contents of archived changes (just in case) with \ntar -tvf $safearchive\n" &&
    git reset --hard && git clean -df
}

function netlist() {
    for dvc in $(ipconfig getiflist | tr ' ' "\n" | sort); do echo "   $dvc : $(ipconfig getifaddr $dvc)"; done
    #for dvc in $(ipconfig getiflist | tr ' ' "\n" | grep -v bridge | sort); do echo "   $dvc : $(ipconfig getifaddr $dvc)"; done
    # defipaddr=$(ipconfig getifaddr $(ipconfig getiflist | tr ' ' "\n" | grep -v bridge | sort | tail -1))
}

function plist_pluck() {
    # e.g. show the path for php 7.0 brew service
    # plist_pluck $(brew_service_pluck php@7.0 file) ProgramArguments | jq .[0]

    [ $# -lt 1 ] && { echo "usage:$0 plist_file [key]" > /dev/stderr ; return 1; }
    case $# in
        1 )
            plutil -convert json -o - $1 | jq .
            ;;
        2 )
            plutil -convert json -o - $1 | jq -e -r .$2
            ;;
        * )
            ;;
    esac
}


function dockspace {
	# default - add space tile to dock
	defaults write com.apple.dock persistent-apps -array-add '{"tile-type"="spacer-tile";}'
	killall Dock
}


function gen_random() {
	# Allow "tr" to process non-utf8 byte sequences, read random bytes and keep only alphanumerics
	length=${1:-32}
	LC_CTYPE=C tr -dc A-Za-z0-9 < /dev/urandom | head -c$length
}


function scriptdir() {
	# get the folder the 'current' script (as called from) is working under, https://stackoverflow.com/questions/59895
	echo "$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
}


function kill_port () {
    [ $# -eq 1 ] && kill $(lsof -t -i4TCP:$1) && echo 'done'
}


function what_port() {

	# macOs - what app is running on a port

	if [ $# -lt 1 ]; then
		echo "usage: PORT";
		return 1;
	fi
    local port=$1

    type -p nc &>/dev/null || {
        echo "cannot find util nc... please install nc, brew install nc"
        return 3
    }
    type -p pstree &>/dev/null || {
        echo "cannot find util nc... please install nc, brew install pstree"
        return 3
    }

    if nc -z localhost $port &>/dev/null; then
	    echo "PORT '$port' on localhost has a process listening"

        # find ps for port
	    pids=$(netstat -anv | awk '{print $4","$9}' | grep "\.$port," | cut -d, -f2 | uniq | xargs)
        # find parent id (exclude 0 or 1 for launchd)
	    ppids=$(ps -o ppid -p $pids | tail -n +2 | grep -v 1 | xargs || true)
	    #
	    [ -z $ppids ] && pstree $pids || pstree $ppids
	    return
    else
        echo "PORT '$port' on localhost does not have a process listening">&2
        return 1
    fi

}

function d() {

    if [[ $# -eq 1 ]]; then
        selected=$1
    else
        rootfolder="${WORKSPACE:-$HOME/Documents}"
        items="$(find $rootfolder -maxdepth 1 -mindepth 1 \( -type l -o -type d \))"
        selected="$(echo "$items" | fzf)"
    fi

    dirname="$(basename "$selected" | sed 's/\./_/g')"

    cd "$selected"
}

function po() {
	#
	# Function to "project open" (was op but OnePassword script prefers that!) open specified project in projects folder
	#

	# To override use env WORKSPACE, e.g. export WORKSPACE=~/Code
	rootfolder="${WORKSPACE:-$HOME/code}"

	# echo "ENV(WORKSPACE:${WORKSPACE})"

	found=0 # 0 = Not Found; 1 = Found
	project="$1" # Name of project given
	repo="$2" # Name of repository given
	count=0 # Array counter

	# Following is in order of preference
	if [[ $repo != "" ]]; then # Change to project repo
		directories[$count]=${rootfolder}/${project}/${repo}; ((count++));
		directories[$count]=${rootfolder}/${project}*/${repo}*; ((count++));
		directories[$count]=${rootfolder}/${project}*/bgdevlab-${repo}; ((count++));
	fi

	# Usually webapp is the common repo if no repo was specified
	directories[$count]=${rootfolder}/${project}/webapp; ((count++));
	directories[$count]=${rootfolder}/${project}/${project}; ((count++));
	directories[$count]=${rootfolder}/${project}/scratch; ((count++));
	directories[$count]=${rootfolder}/${project}; ((count++));
	directories[$count]=${rootfolder}/${project}*; ((count++));

	# Look for possible project folders and change into it if one found.
	for dir in ${directories[@]}; do
		if [[ -d $dir ]]; then
			found=1
			pushd $dir &>/dev/null
			echo -e "Changed directory to: ${GREEN}'$dir'$NC"
			break
		fi
	done

	# Was folder changed?
	if [[ $found == 0 ]]; then
		echo -e "${RED}Project directory not found.$NC"
	fi
}

function npmlist() {
    # e.g. npmlist prebuild
    # e.g. npmlist prebuild withdate
    local s=""
    local d=""
    [ $# -eq 1 ] && s="_$1"
    [ $# -eq 2 ] && d="_"$(date "+%Y_%m_%d.%H%M%S")
    npm list --depth=0 > "npm${s}_list0${d}.txt"
    npm list --depth=1 > "npm${s}_list1${d}.txt"
    npm list --depth=2 > "npm${s}_list2${d}.txt"
}

function man() {
    # colour for man pages
	env \
		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
		LESS_TERMCAP_md=$(printf "\e[1;31m") \
		LESS_TERMCAP_me=$(printf "\e[0m") \
		LESS_TERMCAP_se=$(printf "\e[0m") \
		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
		LESS_TERMCAP_ue=$(printf "\e[0m") \
		LESS_TERMCAP_us=$(printf "\e[1;32m") \
		man "$@"
}

function sshrem() {
	# TODO : look at ssh-keyscan -H for another option
	if [ $# -lt 1 ]; then
		echo -e "missing argument: host[s]"
		return 1;
	fi
	for s in $@
	do
	echo -e "\n>> removing '$s'";
	for khfile in $(find ~/.ssh -regex '.*known_hosts[0-9]*$')
		do
            if [[ $ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                # ip-address
                ssh-keygen -R "${s}" -f ${khfile} &>/dev/null && echo "success removed $target_server" || echo "problem removing $target_server"
            else
                target_server="${s}"
                target_server_ip=$(dig +search +short ${target_server})
                target_server_shortname=$(echo ${target_server} | cut -d. -f1)

                echo "Scanning : ${khfile} for '${target_server}'"

                ssh-keygen -R ${target_server} -f ${khfile} &>/dev/null && echo "success removed $target_server" || echo "problem removing $target_server"
                if [ ! -z "$target_server_ip" ]; then
                    ssh-keygen -R ${target_server_ip} -f ${khfile} &>/dev/null && echo "success removed $target_server_ip" || echo "problem removing $target_server_ip"
                fi
                if [ ! -z "$target_server_ip" ]; then
                    ssh-keygen -R ${target_server_shortname} -f ${khfile} &>/dev/null && echo "success removed $target_server_shortname" || echo "problem removing $target_server_shortname"
                fi
            fi
		done
	done
}


function ssh_prepare_keyexchange() {
	# allow easy remote access - authorize key for current user
	if [ $# -lt 1 ]; then
		echo "args: host [user]"
		return 1;
	fi

	target_site=$1
	user="${2:-root}"

	for khfile in $(find ~/.ssh -regex '.*known_hosts[0-9]*$')
	do
		ssh-keyscan -H ${target_site} >> ${khfile}
	done
	ssh-copy-id ${user}@${target_site}

}

# ===========================================================================
#   Java

function show_manifest() {
	# show contents of JAR manifest
	if [ $# -eq 1 ] && [ -f $1 ]; then
		unzip -q -c "$1" "META-INF/MANIFEST.MF" | sort
	else
		echo "Purpose: view JAR files MANIFEST.MF"
		echo "Usage: $0 jarfilename"
	fi
}


# ===========================================================================
#   JS Node NPM

function js_env_install() {

	type -p nvm || echo "Cannot find NVM - try 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash'"

	# notify only as dotbot and Brewfile manage node and yarn install.
    type -p node &>/dev/null || echo "brew install node - see .Brewfile"
    type -p yarn &>/dev/null || echo "brew install yarn - see .Brewfile"

    if type -p nvm; then
		nvm use stable || nvm install stable
		nvm use stable && npm install twilio-cli -g
	fi
	# add

}


# ===========================================================================
#   PHP Laravel Valet Composer

#   auth:clear-resets                               Flush expired password reset tokens
#   cache:clear                                     Flush the application cache
#   clear-compiled                                  Remove the compiled class file
#   config:clear                                    Remove the configuration cache file
#   debugbar:clear                                  Clear the Debugbar Storage
#   email-suppressions:clear-bounced-emails         Clear Bounced Emails from SendGrid
#   event:clear                                     Clear all cached events and listeners
#   media-library:clear                             Delete all items in a media collection.
#   opcache:clear                                   Clear OPCache
#   optimize:clear                                  Remove the cached bootstrap files
#   queue:clear                                     Delete all of the jobs from the specified queue
#   route:clear                                     Remove the route cache file
#   schedule:clear-cache                            Delete the cached mutex files created by scheduler
#   view:clear                                      Clear all compiled view files


function clearall() {
    [ ! -e ./artisan ] && echo "no artisan" && return
    artisan="php artisan "
    dotenv=.env
    clearenv="${1:-${APP_ENV:-}}"
    if [ -n "$clearenv" ]; then
        artisan="php artisan --env $clearenv "
        dotenv=.env.$clearenv
        # reset if local
        if [ "$clearenv" = "local" ]; then
            dotenv=.env
        fi
    fi
    echo -e "\nUsing APP_ENV as '${clearenv:-local}' with dotenv file $dotenv \n"
    [ ! -e "${dotenv}" ] && {
        echo "Stopping - cannot find dotenv file '$dotenv'"
        return 1
    }
    grep -E 'APP_ENV|_CONNECTION|_DRIVER|PROCORE|DB_DATABASE' $dotenv | grep -v '^#'
    echo -e "\n"

    php_ver="$(get_php_version)"

    cleanfiles=$(ls -1 bootstrap/cache/*.php 2>&1) && {
        for f in $cleanfiles; do echo "removing $f"; done
        /bin/rm -f bootstrap/cache/*.php &>/dev/null || true;
    } || true

    ac=$($artisan clear 2>&1) && echo $ac || true
    case "$php_ver" in
    5.6)
        logit "not supported" && return 1
        ;;
    7.0|7.1|7.2|7.3|7.4)
        artisan="php artisan "
        $artisan | grep -q opcache && $artisan opcache:clear 2>&1 || true
        ac=$($artisan queue:flush 2>&1) && echo $ac || true
        # there isn't optimize:clear for php7.0 compatible laravel versions
        # $artisan event:clear
        $artisan view:clear
        $artisan cache:clear
        $artisan config:clear
        $artisan route:clear

        if [ $# -gt 1 ]; then
            # optimize things again.
            $artisan optimize
        fi
        ;;
     *)
        # this clears all
        $artisan optimize:clear
        $artisan | grep -q opcache && $artisan opcache:clear &>/dev/null || true
        $artisan queue:clear
        $artisan queue:flush
        $artisan schedule:clear-cache

        if [ $# -gt 1 ]; then
            # optimize things again.
            $artisan optimize
        fi
    esac
    echo "done"
    return

}

function macos_sed_fix() {
    if uname | grep -iq darwin; then
      if [ ! -e "$HOMEBREW_PREFIX/opt/gnu-sed/libexec/gnubin" ]; then
        HOMEBREW_NO_INSTALL_UPGRADE=true brew install gnu-sed
      fi
      PATH="$HOMEBREW_PREFIX/opt/gnu-sed/libexec/gnubin:$PATH"
    fi
}

# autocomplete - Laravel - Artisan - https://gist.github.com/jhoff/8fbe4116d74931751ecc9e8203dfb7c4
_artisan() {
    COMP_WORDBREAKS=${COMP_WORDBREAKS//:/}
    COMMANDS=$(php artisan --raw --no-ansi list | sed "s/[[:space:]].*//g")
    COMPREPLY=($(compgen -W "$COMMANDS" -- "${COMP_WORDS[COMP_CWORD]}"))
    return 0
}
complete -F _artisan art
complete -F _artisan artisan


# This file is part of the Symfony package.
#
# (c) Fabien Potencier <fabien@symfony.com>
#
# For the full copyright and license information, please view
# https://symfony.com/doc/current/contributing/code/license.html

_sf_dep() {
    # Use newline as only separator to allow space in completion values
    IFS=$'\n'
    local sf_cmd="${COMP_WORDS[0]}"

    # for an alias, get the real script behind it
    sf_cmd_type=$(type -t $sf_cmd)
    if [[ $sf_cmd_type == "alias" ]]; then
        sf_cmd=$(alias $sf_cmd | sed -E "s/alias $sf_cmd='(.*)'/\1/")
    elif [[ $sf_cmd_type == "file" ]]; then
        sf_cmd=$(type -p $sf_cmd)
    fi

    if [[ $sf_cmd_type != "function" && ! -x $sf_cmd ]]; then
        return 1
    fi

    local cur prev words cword
    _get_comp_words_by_ref -n := cur prev words cword

    local completecmd=("$sf_cmd" "_complete" "--no-interaction" "-sbash" "-c$cword" "-S7.3.3")
    for w in ${words[@]}; do
        w=$(printf -- '%b' "$w")
        # remove quotes from typed values
        quote="${w:0:1}"
        if [ "$quote" == \' ]; then
            w="${w%\'}"
            w="${w#\'}"
        elif [ "$quote" == \" ]; then
            w="${w%\"}"
            w="${w#\"}"
        fi
        # empty values are ignored
        if [ ! -z "$w" ]; then
            completecmd+=("-i$w")
        fi
    done

    local sfcomplete
    if sfcomplete=$(${completecmd[@]} 2>&1); then
        local quote suggestions
        quote=${cur:0:1}

        # Use single quotes by default if suggestions contains backslash (FQCN)
        if [ "$quote" == '' ] && [[ "$sfcomplete" =~ \\ ]]; then
            quote=\'
        fi

        if [ "$quote" == \' ]; then
            # single quotes: no additional escaping (does not accept ' in values)
            suggestions=$(for s in $sfcomplete; do printf $'%q%q%q\n' "$quote" "$s" "$quote"; done)
        elif [ "$quote" == \" ]; then
            # double quotes: double escaping for \ $ ` "
            suggestions=$(for s in $sfcomplete; do
                s=${s//\\/\\\\}
                s=${s//\$/\\\$}
                s=${s//\`/\\\`}
                s=${s//\"/\\\"}
                printf $'%q%q%q\n' "$quote" "$s" "$quote";
            done)
        else
            # no quotes: double escaping
            suggestions=$(for s in $sfcomplete; do printf $'%q\n' $(printf '%q' "$s"); done)
        fi
        COMPREPLY=($(IFS=$'\n' compgen -W "$suggestions" -- $(printf -- "%q" "$cur")))
        __ltrim_colon_completions "$cur"
    else
        if [[ "$sfcomplete" != *"Command \"_complete\" is not defined."* ]]; then
            >&2 echo
            >&2 echo $sfcomplete
        fi

        return 1
    fi
}

complete -F _sf_dep dep


function imagick_test() {

    if [ $# -ne 1 ]; then
        echo "usage: ${FUNCNAME[0]} filename"
        return 1
    fi

    [ type -p php &>/dev/null ] || {
        echo "cannot find php"
        return 1
    }

    outputfile=$1
    php <<"IMAGICK_TEST" >$outputfile
<?php
$im = new Imagick();
$im->newPseudoImage(650, 250, "gradient:red-black");
$im->setImageFormat('png');
header("Content-Type: image/png");
echo $im;
IMAGICK_TEST
    file $outputfile | grep 'PNG image data'
    return $?
}


function valet_config_backup() {
    # backup any existing composer global definitions.
    backup_config="$HOME/backup_composer_and_valet_config.$(date +%Y%m%d_%H%M_%s).tar.gz"
    tar -czf $backup_config $(composer global config --absolute home 2>/dev/null)/config.json $HOME/.valet $HOME/.config/valet &>/dev/null

    if test -e "$backup_config"; then
        echo "👍 backup of composer and valet configuration completed - see $backup_config"
    else
        echo "👎 backup of composer and valet configuration ($backup_config) FAILED"
    fi
}

function xdebug_install_phpstorm() {
    local PHP_VERSION="${1:-7.0}"
    local XDEBUG_PORT="${2:-9001}"
cat <<XDEBUG_CONF
[xdebug]
zend_extension="/usr/local/opt/xdebug@$PHP_VERSION/xdebug.so"
# https://kevdees.com/installing-xdebug-for-php7/
xdebug.remote_enable = 1
xdebug.remote_connect_back=1
xdebug.scream=1
xdebug.show_local_vars=1
xdebug.idekey=PHPSTORM
xdebug.remote_port = $XDEBUG_PORT

[xdebug]
# for xdebug 3.0+
#zend_extension="/usr/local/opt/xdebug@$PHP_VERSION/xdebug.so"
#zend_extension=xdebug.so
xdebug.mode=debug
xdebug.client_port=$XDEBUG_PORT
xdebug.scream=1
xdebug.idekey=PHPSTORM
xdebug.start_with_request=yes
xdebug.show_local_vars=1
xdebug.discover_client_host=true
#xdebug.client_host=172.16.252.1
xdebug.client_host=127.0.0.1
XDEBUG_CONF

}


# ===========================================================================
#   Brew Apps

# https://www.jetbrains.com/help/phpstorm/10.0/working-with-phpstorm-features-from-command-line.html
# see 'Install Command Link Launcher from within the app itself.' /usr/local/bin/pstorm

function launchSmartGit() {

	dir="${1:-$(pwd)}"

	if [ ! -d ${dir} ]; then
		echo -e "$RED'${dir}' is not a valid directory.$NC"
		return 1
	fi

	pushd "$dir" 1>/dev/null

	if [ git rev-parse --is-inside-work-tree &>/dev/null ]; then
		local app="/Applications/SmartGit.app/Contents/MacOS/SmartGit"
		nohup "${app}" --log "${1}" &>/dev/null &
	else
		echo -e "$RED'${dir}' is not a GIT directory.$NC"
	fi

	popd 1>/dev/null

}


function git_add_to_osxkeychain() {
	# https://opensource.apple.com/source/Git/Git-33/src/git/contrib/credential/osxkeychain/git-credential-osxkeychain.c.auto.html
	[ $# -ne 3 ] && {
		echo 'Usage: host username password'
		return 1
	}
	printf "protocol=https\nhost=%s\nusername=%s\npassword=%s\n" "$1" "$2" "$3" | git "credential-osxkeychain" store
}

function git_tag_relases() {
    git for-each-ref --sort=-creatordate --format '## %(refname)

**Released:**  %(creatordate) %(object:short) - %(*objectname:short)

   -  %(*subject)

' refs/tags | sed -e 's-refs/tags/--'

}


# ===========================================================================
#   Vagrant / VMWare macOs VMWare Fusion helper functions

function vagrant_findvm() {

	local __resultvar=${1:-vmid}
	local path=${2:-.}

	# try sub folder for VMs
	echo "searching subfolders for .vagrant"
	local options=()
	local optionsid=()

	for vf in $(find $path -type f -path "*/.vagrant/machines/default/*/index_uuid"); do
		optionid=$(printf "%b " "$(cat $vf)");
		option=$(printf "%b________%b\n" "$(cat $vf)" $vf);
		optionsid+=($optionid)
		options+=($option)
	done

	PS3='Which VM: '
	if (( ${#options[@]} )); then

		select opt in "${options[@]}"
		do
			case $opt in
				*) break
				;;
			esac
		done

		lvmid=${optionsid[$((REPLY-1))]}
		if [[ "$__resultvar" ]]; then
			eval $__resultvar="'$lvmid'"
		fi
	fi

}


function vagrant_ssh() {

	# Vagrant SSH
	if [ $# -eq 0 ]; then
		vagrant ssh 2>/dev/null && return || echo 'no VM found in current folder';
	fi;

	# try arg as VM ID
	if [ $# -eq 1 ]; then
		vagrant ssh $1 2>/dev/null && return || echo "no VM found with argument specified"
	fi

	# find VM and assign VMID to var_name passed
	vagrant_findvm vmid
	if [ ! -z "${vmid}" ];then
		echo "trying ssh for $vmid"
		vagrant ssh $vmid
		echo "finished ssh for $vmid"
	else
		echo "no VMs found in subfolder"
	fi

}


function vagrant_reload() {

	# Vagrant Reload
	if [ $# -eq 0 ]; then
		vagrant reload 2>/dev/null && return || echo 'no VM found in current folder';
	fi;

	# try arg as VM ID
	if [ $# -eq 1 ]; then
		vagrant reload $1 2>/dev/null && return || echo "no VM found with argument specified"
	fi

	# find VM and assign VMID to var_name passed
	vagrant_findvm vmid
	if [ ! -z "${vmid}" ];then
		echo "trying reload for $vmid"
		vagrant reload $vmid
		echo "finished reload for $vmid"
	else
		echo "no VMs found in subfolder"
	fi
}


function vagrant_kill() {

	# find VM and assign VMID to var_name passed
	vagrant_findvm vmid
	if [ ! -z "${vmid}" ];then
		echo "trying destroy for $vmid"
		vagrant destroy -f $vmid
		echo "finished destroy for $vmid"
	else
		echo "no VMs found in subfolder"
	fi

}


function vagrant_stat() {
	# find VM and assign VMID to var_name passed
	vagrant_findvm vmid
	if [ ! -z "${vmid}" ];then
		echo "trying status for $vmid"
		vagrant status $vmid
		echo "finished status for $vmid"
	else
		echo "no VMs found in subfolder"
	fi
}


function launchVM() {
	# wip
	[ $# -ne 1 ] && echo "Specify a path to an OVA file to use."
	SRC_OVF=$1

	vm_name=${1:-$(date +%F-%H%M%S)}
	vm_path=${2:-vms}/$vm_name

	mkdir -p $vm_path && ovftool $SRC_OVF $vm_path/${vm_name}.vmx && vmrun -T fusion start $vm_path/${vm_name}.vmx
	# vmrun -T fusion addNetworkAdapter ${vm_name}.vmx bridged && vmrun -T fusion start ${vm_name}.vmx
}

function clear_dns_cache() {

    [ "$(uname)" == 'Darwin' ] && {
        sudo dscacheutil -flushcache
        sudo killall -HUP mDNSResponder
        echo "cleared"
    }
}


function rebuildOpenWith() {
    /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user
    killall Finder
    # see https://mac-how-to.gadgethacks.com/how-to/remove-duplicates-customize-open-with-menu-mac-os-x-0157100/
}


# https://gist.githubusercontent.com/nachoparker/c93a8675ba9a93bc5f422b060561a169/raw/483685ac78bccfba4277315559ece375cc287eed/git-forget-blob.sh
# Completely remove a file from a git repository history
#
# Copyleft 2017 by Ignacio Nunez Hernanz <nacho _a_t_ ownyourbits _d_o_t_ com>
# GPL licensed (see end of file) * Use at your own risk!
#
# Usage:
#   git-forget-blob file_to_forget
#
# Notes:
#   It rewrites history, therefore will change commit references and delete tags
function git-forget-blob()
{
    local BLOBS=( $( git verify-pack -v .git/objects/pack/*.idx | grep blob | awk '{ print $1 }' ) )
    for ref in ${BLOBS[@]}; do
        local FILE="$( git rev-list --objects --all | grep $ref | awk '{ print $2 }' )"
        [[ "$FILE" == "$1" ]] && break
        unset FILE
    done
    [[ "$FILE" == "" ]] && { echo "$1 not found in repo history" && return; }

    git tag | xargs git tag -d
    git filter-branch --index-filter "git rm --cached --ignore-unmatch $FILE"
    rm -rf .git/refs/original/ .git/refs/remotes/ .git/*_HEAD .git/logs/
    git for-each-ref --format="%(refname)" refs/original/ | xargs -n1 --no-run-if-empty git update-ref -d
    git reflog expire --expire-unreachable=now --all
    git repack -A -d
    git prune

    # License
    #
    # This script is free software; you can redistribute it and/or modify it
    # under the terms of the GNU General Public License as published by
    # the Free Software Foundation; either version 2 of the License, or
    # (at your option) any later version.
    #
    # This script is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with this script; if not, write to the
    # Free Software Foundation, Inc., 59 Temple Place, Suite 330,
    # Boston, MA  02111-1307  USA
}

function git_late_night_commits() {
    [ $# -lt 2 ] && {
        echo -e "Usage: ${FUNCNAME[0]} since-date author-name field_delim\n\tsince-data    YYYY-MM-DD\n\tauthor-name   any-text\n\tfield_delim    delimiter"
        return 1
    }
    delim="${3:-~}"
    git log --all --date=iso-local --pretty=format:"%h${delim}%ad${delim}%an %d${delim}%s " --since="$1" | grep -i "$2" | grep -E "( 1[89]:)|( 2[0-4]:)|( 0[0-5]:)";
}


function git_late_night_commits_daily() {
    [ $# -lt 2 ] && {
        echo -e "Usage: ${FUNCNAME[0]} since-date author-name field_delim\n\tsince-data    YYYY-MM-DD\n\tauthor-name   any-text\n\tfield_delim    delimiter"
        return 1
    }
    delim="${3:-~}"
    # group by day and list first and last commit for that day

    list="$(git_late_night_commits $1 $2 $delim | cut -d$delim -f2,4-)"
    days=$(echo "$list" | cut -d$delim -f1 | cut -d' ' -f1 | sort --unique)
    starting=$(for day in $days; do echo "$list" | grep $day | sort -k2,2 | head -1;done)
    ending=$(for day in $days; do echo "$list" | grep $day | sort -k2,2 | tail -1;done)
    # combine and order again
    (echo "$starting";echo "$ending") | sort -k1,1 -r -k2,2 --unique | sed -E 's/\+[0-9]{1,4}//g' | tr "$delim" " "
    unset list days starting ending
}

function late_night_report() {
    [ $# -lt 2 ] && {
        echo -e "Usage: ${FUNCNAME[0]} since-date author-name field_delim\n\tsince-data    YYYY-MM-DD\n\tauthor-name   any-text\n\tfield_delim    delimiter"
        return 1
    }
    for repo in $(find $WORKSPACE -type d -name '.git' -maxdepth 3); do echo $repo; pushd $repo &>/dev/null;git_late_night_commits_daily $1 $2 $3;popd &>/dev/null; done
}


function git_grouped_log () {
  while read -r -u 9 since name
  do
    until=$(date -j -v+1d -f '%Y-%m-%d' $since +%Y-%m-%d)

    echo "$since $name"
    echo

    GIT_PAGER=cat git log             \
      --date=iso-local \
      --committer="$name"             \
      --since="$since 00:00:00 +0000" \
      --until="$until 00:00:00 +0000" \
      --pretty=format:"%h : %ad : %an %d : %s "

    echo
  done 9< <(git log --date=iso-local --format=$'%cd %cn' | grep -i "$2" | grep -E "( 1[89]:)|( 2[0-4]:)|( 0[0-5]:)"| sort --unique --reverse)
}


function git-grouped-log_original () {
  while read -r -u 9 since name
  do
    until=$(date -j -v+1d -f '%Y-%m-%d' $since +%Y-%m-%d)

    echo "$since $name"
    echo

    GIT_PAGER=cat git log             \
      --no-merges                     \
      --committer="$name"             \
      --since="$since 00:00:00 +0000" \
      --until="$until 00:00:00 +0000" \
      --format='  * [%h] %s'

    echo
  done 9< <(git log --no-merges --format=$'%cd %cn' --date=short | sort --unique --reverse)
}
